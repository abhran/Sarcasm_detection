{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN-RNN(Glove)","provenance":[{"file_id":"1FJ7TUopKrbctHjGNexeabGc8ApKN73WY","timestamp":1621421169230}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"DzP-MutDax4y"},"source":["#CNN model\n","https://arxiv.org/abs/1610.08815"]},{"cell_type":"code","metadata":{"id":"56oRUl9LbR_p","executionInfo":{"status":"ok","timestamp":1622115778600,"user_tz":-330,"elapsed":3064,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}}},"source":["import pandas as pd\n","import numpy as np\n","from numpy import asarray\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","\n","import pydotplus as pyd\n","\n","import keras\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.models import Model\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard, EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.layers import Dense, Input, Flatten, Embedding, Conv1D, MaxPooling1D, Dropout, BatchNormalization, Activation, concatenate"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"lgBPQSktfKSF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622115801304,"user_tz":-330,"elapsed":22719,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"451e59b1-f20d-4fd0-d20a-0a705c248b72"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rxBpLQHwexnh","colab":{"base_uri":"https://localhost:8080/","height":196},"executionInfo":{"status":"ok","timestamp":1622115806693,"user_tz":-330,"elapsed":3129,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"a45f0764-e908-49e8-c24b-908948061911"},"source":["df1 = pd.read_json('/content/drive/MyDrive/sarcasm detection/Datasets/twitter/sarcasm_detection_shared_task_twitter_testing.jsonl',lines=True)\n","df = pd.read_json('/content/drive/MyDrive/sarcasm detection/Datasets/twitter/sarcasm_detection_shared_task_twitter_training.jsonl',lines=True)\n","\n","df['labels'] = df['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","df1['labels'] = df1['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","df1.tail()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>context</th>\n","      <th>response</th>\n","      <th>id</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1795</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[I have been a business customer of MWeb @USER...</td>\n","      <td>@USER @USER @USER is definitely the best out t...</td>\n","      <td>twitter_1796</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1796</th>\n","      <td>SARCASM</td>\n","      <td>[A woman refuses to have her temperature taken...</td>\n","      <td>@USER @USER Ye let her out run wild and infect...</td>\n","      <td>twitter_1797</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1797</th>\n","      <td>SARCASM</td>\n","      <td>[The reason big government wants @USER out is ...</td>\n","      <td>@USER @USER @USER Thanks for that , I would ha...</td>\n","      <td>twitter_1798</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1798</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Happy #musicmonday and #thanks for #all your ...</td>\n","      <td>@USER @USER @USER Yes also #found this on #new...</td>\n","      <td>twitter_1799</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1799</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Not long wrapped on the amazing #January22nd ...</td>\n","      <td>@USER @USER @USER you still need to send the l...</td>\n","      <td>twitter_1800</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            label  ... labels\n","1795  NOT_SARCASM  ...      1\n","1796      SARCASM  ...      0\n","1797      SARCASM  ...      0\n","1798  NOT_SARCASM  ...      1\n","1799  NOT_SARCASM  ...      1\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"_DCnpNDeal4y"},"source":[""]},{"cell_type":"code","metadata":{"id":"VIICpa5-Zona","executionInfo":{"status":"ok","timestamp":1622115806697,"user_tz":-330,"elapsed":27,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}}},"source":[""],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"ziQPlpMCfJcM","colab":{"base_uri":"https://localhost:8080/","height":572},"executionInfo":{"status":"ok","timestamp":1622115806699,"user_tz":-330,"elapsed":28,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"18467e2e-0e44-428b-8334-796f79d00cb5"},"source":["df[\"tweets\"]=df['response']\n","df1[\"tweets\"]=df1['response']\n","data=df\n","df1"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>context</th>\n","      <th>response</th>\n","      <th>id</th>\n","      <th>labels</th>\n","      <th>tweets</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Well now that ’ s problematic AF &lt;URL&gt;, @USER...</td>\n","      <td>@USER @USER @USER My 3 year old , that just fi...</td>\n","      <td>twitter_1</td>\n","      <td>1</td>\n","      <td>@USER @USER @USER My 3 year old , that just fi...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>SARCASM</td>\n","      <td>[Last week the Fake News said that a section o...</td>\n","      <td>@USER @USER How many verifiable lies has he to...</td>\n","      <td>twitter_2</td>\n","      <td>0</td>\n","      <td>@USER @USER How many verifiable lies has he to...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SARCASM</td>\n","      <td>[@USER Let ’ s Aplaud Brett When he deserves i...</td>\n","      <td>@USER @USER @USER Maybe Docs just a scrub of a...</td>\n","      <td>twitter_3</td>\n","      <td>0</td>\n","      <td>@USER @USER @USER Maybe Docs just a scrub of a...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Women generally hate this president . What's ...</td>\n","      <td>@USER @USER is just a cover up for the real ha...</td>\n","      <td>twitter_4</td>\n","      <td>1</td>\n","      <td>@USER @USER is just a cover up for the real ha...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Dear media Remoaners , you excitedly sharing ...</td>\n","      <td>@USER @USER @USER The irony being that he even...</td>\n","      <td>twitter_5</td>\n","      <td>1</td>\n","      <td>@USER @USER @USER The irony being that he even...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1795</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[I have been a business customer of MWeb @USER...</td>\n","      <td>@USER @USER @USER is definitely the best out t...</td>\n","      <td>twitter_1796</td>\n","      <td>1</td>\n","      <td>@USER @USER @USER is definitely the best out t...</td>\n","    </tr>\n","    <tr>\n","      <th>1796</th>\n","      <td>SARCASM</td>\n","      <td>[A woman refuses to have her temperature taken...</td>\n","      <td>@USER @USER Ye let her out run wild and infect...</td>\n","      <td>twitter_1797</td>\n","      <td>0</td>\n","      <td>@USER @USER Ye let her out run wild and infect...</td>\n","    </tr>\n","    <tr>\n","      <th>1797</th>\n","      <td>SARCASM</td>\n","      <td>[The reason big government wants @USER out is ...</td>\n","      <td>@USER @USER @USER Thanks for that , I would ha...</td>\n","      <td>twitter_1798</td>\n","      <td>0</td>\n","      <td>@USER @USER @USER Thanks for that , I would ha...</td>\n","    </tr>\n","    <tr>\n","      <th>1798</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Happy #musicmonday and #thanks for #all your ...</td>\n","      <td>@USER @USER @USER Yes also #found this on #new...</td>\n","      <td>twitter_1799</td>\n","      <td>1</td>\n","      <td>@USER @USER @USER Yes also #found this on #new...</td>\n","    </tr>\n","    <tr>\n","      <th>1799</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Not long wrapped on the amazing #January22nd ...</td>\n","      <td>@USER @USER @USER you still need to send the l...</td>\n","      <td>twitter_1800</td>\n","      <td>1</td>\n","      <td>@USER @USER @USER you still need to send the l...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1800 rows × 6 columns</p>\n","</div>"],"text/plain":["            label  ...                                             tweets\n","0     NOT_SARCASM  ...  @USER @USER @USER My 3 year old , that just fi...\n","1         SARCASM  ...  @USER @USER How many verifiable lies has he to...\n","2         SARCASM  ...  @USER @USER @USER Maybe Docs just a scrub of a...\n","3     NOT_SARCASM  ...  @USER @USER is just a cover up for the real ha...\n","4     NOT_SARCASM  ...  @USER @USER @USER The irony being that he even...\n","...           ...  ...                                                ...\n","1795  NOT_SARCASM  ...  @USER @USER @USER is definitely the best out t...\n","1796      SARCASM  ...  @USER @USER Ye let her out run wild and infect...\n","1797      SARCASM  ...  @USER @USER @USER Thanks for that , I would ha...\n","1798  NOT_SARCASM  ...  @USER @USER @USER Yes also #found this on #new...\n","1799  NOT_SARCASM  ...  @USER @USER @USER you still need to send the l...\n","\n","[1800 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"I0aXGKNvf4Xc","executionInfo":{"status":"ok","timestamp":1622115806701,"user_tz":-330,"elapsed":28,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}}},"source":["X_s = data['tweets'].values\n","y_s = data['labels'].values\n","\n","Xt_s = df1['tweets'].values\n","yt_s = df1['labels'].values\n","# X_train, X_test, y_train, y_test = train_test_split(X_s, y_s, test_size=0.2, random_state=42)\n","X_train, X_test, y_train, y_test = X_s,Xt_s,y_s,yt_s"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"ubbVYAZbf4UA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622115806702,"user_tz":-330,"elapsed":27,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"907f3325-4024-4048-be0b-cfdc723d71e1"},"source":["unique, counts = np.unique(y_train, return_counts=True)\n","dict(zip(unique, counts))\n","# X_train, X_test, y_train, y_test = train_test_split(X_s, y_s, test_size=0.2, random_state=42)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 2500, 1: 2500}"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"N3wrEM7lf4R8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622115806703,"user_tz":-330,"elapsed":21,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"4938677f-5fbb-42e9-d1bb-0d86206536e1"},"source":["unique, counts = np.unique(y_test, return_counts=True)\n","dict(zip(unique, counts))"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 900, 1: 900}"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"xjUSILrvf4P2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622115807333,"user_tz":-330,"elapsed":11,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"dbad580c-a256-4a8f-b435-c3cd1bae7c38"},"source":["t = Tokenizer(filters='\"$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n')\n","t.fit_on_texts(X_train)\n","vocab_size = len(t.word_index) + 1\n","print(vocab_size)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["14017\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FiNpT1Hmf4NS","executionInfo":{"status":"ok","timestamp":1622115808061,"user_tz":-330,"elapsed":5,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}}},"source":["encoded_train = t.texts_to_sequences(X_train)\n","encoded_test = t.texts_to_sequences(X_test)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"1eSvUy6zf4Kn","executionInfo":{"status":"ok","timestamp":1622115808580,"user_tz":-330,"elapsed":3,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}}},"source":["max_length = 140\n","# pad_len=max(max([len(X_train[i]) for i in range(len(X_train))]),max([len(X_test[i]) for i in range(len(X_test))])) #tunable\n","padded_train = pad_sequences(encoded_train, maxlen=max_length, padding='post')\n","padded_test = pad_sequences(encoded_test, maxlen=max_length, padding='post')"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"jVt-_xKuxQJR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zl66AVi3f4GC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622115593805,"user_tz":-330,"elapsed":60389,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"2a325de9-29f5-4308-f72d-5ebaceff8b9f"},"source":["# load the whole embedding into memory\n","embeddings_index = dict()\n","f = open('/content/drive/MyDrive/sarcasm detection/embeddings/glove.twitter.27B.200d.txt')\n","for line in f:\n","    values = line.split()\n","    word = values[0]\n","    coefs = asarray(values[1:], dtype='float32')\n","    embeddings_index[word] = coefs\n","\n","f.close()\n","print('Loaded %s word vectors.' % len(embeddings_index))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Loaded 1193514 word vectors.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EkExlDtNf4EH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621941175692,"user_tz":-330,"elapsed":11,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"52c51b01-c583-42fe-b0e8-083152ce5fed"},"source":["\n","# create a weight matrix for words in training docs\n","embedding_matrix = np.zeros((vocab_size, 200))\n","for word, i in t.word_index.items():\n","    try:\n","        embedding_vector = embeddings_index[word]\n","    except:\n","        embedding_vector = [0]*200\n","    \n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector\n","        \n","embedding_matrix.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(14017, 200)"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"4YmMHPlwf4B3"},"source":["def recall_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","        recall = true_positives / (possible_positives + K.epsilon())\n","        return recall\n","\n","def precision_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","        precision = true_positives / (predicted_positives + K.epsilon())\n","        return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 2*((precision*recall)/(precision+recall+K.epsilon()))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qwz8H6eW5PZX","executionInfo":{"status":"ok","timestamp":1621941175693,"user_tz":-330,"elapsed":8,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"b1230183-2b57-4ebc-ed36-9a4c3cee363a"},"source":["y_train = to_categorical(y_train, num_classes=2)\n","y_test = to_categorical(y_test, num_classes=2)\n","y_train.shape\n","print(y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1. 0.]\n"," [1. 0.]\n"," [1. 0.]\n"," ...\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cs-zdHeff3_6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621941181289,"user_tz":-330,"elapsed":5602,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"03abcacb-d417-4b33-cfe3-6ed5441a90ff"},"source":["input_data = Input(shape=(max_length,), name='main_input')\n","embedding_layer = Embedding(vocab_size, 200, weights=[embedding_matrix], trainable=False)(input_data)\n","conv_1 = Conv1D(filters=50, kernel_size=4, activation='relu')(embedding_layer)\n","max_1 = MaxPooling1D(pool_size=2)(conv_1)\n","conv_2 = Conv1D(filters=100, kernel_size=3, activation='relu')(max_1)\n","max_2 = MaxPooling1D(pool_size=2)(conv_2)\n","# layer=LSTM(128, kernel_initializer='he_normal', activation='sigmoid')(max_2)\n","flatten = Flatten()(max_2)\n","dense = Dense(100, activation='relu', name='fully_connected')(flatten)\n","out = Dense(2, activation='softmax')(dense)\n","\n","model_01 = Model(inputs=[input_data], outputs=[out])\n","\n","print(model_01.summary())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","main_input (InputLayer)      [(None, 140)]             0         \n","_________________________________________________________________\n","embedding (Embedding)        (None, 140, 200)          2803400   \n","_________________________________________________________________\n","conv1d (Conv1D)              (None, 137, 50)           40050     \n","_________________________________________________________________\n","max_pooling1d (MaxPooling1D) (None, 68, 50)            0         \n","_________________________________________________________________\n","conv1d_1 (Conv1D)            (None, 66, 100)           15100     \n","_________________________________________________________________\n","max_pooling1d_1 (MaxPooling1 (None, 33, 100)           0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 3300)              0         \n","_________________________________________________________________\n","fully_connected (Dense)      (None, 100)               330100    \n","_________________________________________________________________\n","dense (Dense)                (None, 2)                 202       \n","=================================================================\n","Total params: 3,188,852\n","Trainable params: 385,452\n","Non-trainable params: 2,803,400\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HQcBi9Tef39o"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YFau-n0uf37l"},"source":["reduce_lr = ReduceLROnPlateau(monitor='val_f1_m', \n","                              mode = 'max', \n","                              factor=0.5, \n","                              patience=5, \n","                              min_lr=0.0001, \n","                              verbose=10)\n","\n","checkpoint = ModelCheckpoint(\"models/sentiment_model.h5\", \n","                               monitor=\"val_f1_m\", \n","                               mode=\"max\", \n","                               save_best_only = True, \n","                               verbose=1)\n","\n","earlystop = EarlyStopping(monitor = 'val_f1_m', \n","                            mode=\"max\", \n","                            min_delta = 0, \n","                            patience = 5,\n","                            verbose=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uUPjY5ickj9F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621941220833,"user_tz":-330,"elapsed":39558,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"af7cde7b-e2ba-4c97-a7e0-9f418a82fc0d"},"source":["c = optimizers.Adam(lr = 0.0001)\n","model_01.compile(optimizer=c, loss='categorical_crossentropy', metrics=[f1_m, 'acc'])\n","\n","h1 = model_01.fit(padded_train, y_train, \n","               batch_size=64, \n","               epochs=50, \n","               verbose=1, callbacks=[checkpoint, earlystop, reduce_lr],\n","               validation_data=(padded_test, y_test)) \n","              #  validation_split=0.2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","79/79 [==============================] - 32s 19ms/step - loss: 0.6769 - f1_m: 0.5781 - acc: 0.5781 - val_loss: 0.6918 - val_f1_m: 0.5469 - val_acc: 0.5406\n","\n","Epoch 00001: val_f1_m improved from -inf to 0.54687, saving model to models/sentiment_model.h5\n","Epoch 2/50\n","79/79 [==============================] - 1s 12ms/step - loss: 0.6343 - f1_m: 0.6506 - acc: 0.6506 - val_loss: 0.6690 - val_f1_m: 0.5937 - val_acc: 0.5889\n","\n","Epoch 00002: val_f1_m improved from 0.54687 to 0.59375, saving model to models/sentiment_model.h5\n","Epoch 3/50\n","79/79 [==============================] - 1s 12ms/step - loss: 0.5680 - f1_m: 0.7111 - acc: 0.7110 - val_loss: 0.6525 - val_f1_m: 0.6245 - val_acc: 0.6206\n","\n","Epoch 00003: val_f1_m improved from 0.59375 to 0.62446, saving model to models/sentiment_model.h5\n","Epoch 4/50\n","79/79 [==============================] - 1s 13ms/step - loss: 0.5152 - f1_m: 0.7378 - acc: 0.7379 - val_loss: 0.6387 - val_f1_m: 0.6643 - val_acc: 0.6539\n","\n","Epoch 00004: val_f1_m improved from 0.62446 to 0.66433, saving model to models/sentiment_model.h5\n","Epoch 5/50\n","79/79 [==============================] - 1s 13ms/step - loss: 0.4882 - f1_m: 0.7571 - acc: 0.7571 - val_loss: 0.6346 - val_f1_m: 0.6455 - val_acc: 0.6422\n","\n","Epoch 00005: val_f1_m did not improve from 0.66433\n","Epoch 6/50\n","79/79 [==============================] - 1s 12ms/step - loss: 0.4685 - f1_m: 0.7717 - acc: 0.7717 - val_loss: 0.6509 - val_f1_m: 0.6622 - val_acc: 0.6556\n","\n","Epoch 00006: val_f1_m did not improve from 0.66433\n","Epoch 7/50\n","79/79 [==============================] - 1s 12ms/step - loss: 0.4551 - f1_m: 0.7818 - acc: 0.7817 - val_loss: 0.6389 - val_f1_m: 0.6519 - val_acc: 0.6489\n","\n","Epoch 00007: val_f1_m did not improve from 0.66433\n","Epoch 8/50\n","79/79 [==============================] - 1s 12ms/step - loss: 0.4256 - f1_m: 0.8089 - acc: 0.8088 - val_loss: 0.6503 - val_f1_m: 0.6482 - val_acc: 0.6450\n","\n","Epoch 00008: val_f1_m did not improve from 0.66433\n","Epoch 9/50\n","79/79 [==============================] - 1s 12ms/step - loss: 0.3932 - f1_m: 0.8335 - acc: 0.8335 - val_loss: 0.6579 - val_f1_m: 0.6449 - val_acc: 0.6456\n","\n","Epoch 00009: val_f1_m did not improve from 0.66433\n","Epoch 00009: early stopping\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KITrWAVakmbp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621941222213,"user_tz":-330,"elapsed":1419,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"6d40ddc9-05bc-4832-9466-8fb3d2add3d6"},"source":["score_1 = model_01.evaluate(padded_test, y_test)\n","score_1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["57/57 [==============================] - 0s 5ms/step - loss: 0.6579 - f1_m: 0.6453 - acc: 0.6456\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.6579468846321106, 0.6452850103378296, 0.6455555558204651]"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"ijPdqVS5kmdr"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"e6ngYmt0bsjO"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9jH8AELmbsfq"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KD4yzPn0bsdv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"786yjzTSbsRG"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QkCfQmq1jwG_"},"source":["# Using RNN"]},{"cell_type":"code","metadata":{"id":"5xD9AasCNyeW"},"source":["import pandas as pd\n","import numpy as np\n","from numpy import asarray\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","\n","import pydotplus as pyd\n","\n","import keras\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.models import Model\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard, EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.layers import Dense, Input, Flatten, Embedding, Conv1D, MaxPooling1D, Dropout, BatchNormalization, Activation, concatenate,LSTM"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eA6r8CE9bmEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621941370409,"user_tz":-330,"elapsed":1124,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"a19dca6e-8535-4100-ba93-e608faec5683"},"source":["# embed_dim = 128\n","# lstm_out = 196\n","# input2 = Input(shape=(max_length,), name='main_input')\n","# embd = Embedding(vocab_size, 200, weights=[embedding_matrix], trainable=False)(input2)\n","# # embd=Embedding(vocab_size, 200)(input2)\n","# drop=SpatialDropout1D(0.4)(embd)\n","# lstm=LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2)(drop)\n","# out2=Dense(2,activation='softmax')(lstm)\n","# model2=Model(input2,out2)\n","\n","import tensorflow as tf\n","inp1 = Input(shape=(max_length,))\n","x = Embedding(vocab_size, 200, weights=[embedding_matrix])(inp1)\n","x = tf.keras.layers.Bidirectional(LSTM(256, return_sequences=True))(x)\n","x = tf.keras.layers.Bidirectional(LSTM(150))(x)\n","x = Dense(128, activation=\"relu\")(x)\n","x = Dropout(0.1)(x)\n","x = Dense(64, activation=\"relu\")(x)\n","x = Dense(2, activation=\"softmax\")(x)    \n","model2 = Model(inputs=inp1, outputs=x)\n","\n","print(model2.summary())\n","model2.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 140)]             0         \n","_________________________________________________________________\n","embedding_1 (Embedding)      (None, 140, 200)          2803400   \n","_________________________________________________________________\n","bidirectional (Bidirectional (None, 140, 512)          935936    \n","_________________________________________________________________\n","bidirectional_1 (Bidirection (None, 300)               795600    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 128)               38528     \n","_________________________________________________________________\n","dropout (Dropout)            (None, 128)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 64)                8256      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 130       \n","=================================================================\n","Total params: 4,581,850\n","Trainable params: 4,581,850\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9K3JUFRDdUoM"},"source":["reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', \n","                              mode = 'max', \n","                              factor=0.9, \n","                              patience=4, \n","                              min_lr=0.00001, \n","                              verbose=10)\n","\n","checkpoint = ModelCheckpoint(\"models/sentiment_model.h5\", \n","                               monitor=\"val_accuracy\", \n","                               mode=\"max\", \n","                               save_best_only = True, \n","                               verbose=1)\n","\n","earlystop = EarlyStopping(monitor = 'val_accuracy', \n","                            mode=\"max\", \n","                            min_delta = 0, \n","                            patience = 4,\n","                            verbose=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UiltcusTdbSq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621941467571,"user_tz":-330,"elapsed":97167,"user":{"displayName":"SWAPNIL KUMAR","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgsLZIPPZoD8cm6pYXnJ-E5s3jPYct0P1FaVpMB1w=s64","userId":"13060826743241505268"}},"outputId":"5bc4ab5f-db19-47ea-b5b4-55302c5885e3"},"source":["batch_size = 64\n","history=model2.fit(padded_train, y_train, epochs = 25, batch_size=batch_size,validation_data=(padded_test,y_test), callbacks=[ earlystop, reduce_lr])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/25\n","79/79 [==============================] - 26s 243ms/step - loss: 0.6427 - accuracy: 0.6276 - val_loss: 0.6219 - val_accuracy: 0.6556\n","Epoch 2/25\n","79/79 [==============================] - 18s 223ms/step - loss: 0.4991 - accuracy: 0.7672 - val_loss: 0.6252 - val_accuracy: 0.6500\n","Epoch 3/25\n","79/79 [==============================] - 18s 223ms/step - loss: 0.3937 - accuracy: 0.8258 - val_loss: 0.7304 - val_accuracy: 0.6517\n","Epoch 4/25\n","79/79 [==============================] - 17s 222ms/step - loss: 0.2533 - accuracy: 0.9029 - val_loss: 1.0560 - val_accuracy: 0.6456\n","Epoch 5/25\n","79/79 [==============================] - 18s 223ms/step - loss: 0.1144 - accuracy: 0.9612 - val_loss: 1.1535 - val_accuracy: 0.6344\n","\n","Epoch 00005: ReduceLROnPlateau reducing learning rate to 0.0009000000427477062.\n","Epoch 00005: early stopping\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"f3aZ5xZHPTTh"},"source":[""],"execution_count":null,"outputs":[]}]}