{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"reddit+twitter agumentated_robertra_large","provenance":[{"file_id":"1KgNG2iW3bjtMtBDVeTbHOa0arsyerjTT","timestamp":1626160709835},{"file_id":"1GEgOtc6o5FjxL68GEOmV4syOzSij7UAB","timestamp":1626068400831},{"file_id":"1-nGkw8xvQdmyjTCiwVIwbiKPoYm_3pF7","timestamp":1625040886049},{"file_id":"1vJm89K5GifSBrgk13JUA_9L_ijaynqu1","timestamp":1624448853836},{"file_id":"1SaLnCHSb6TrMEFtSK8DQ00RXaH7roO2W","timestamp":1624439603375},{"file_id":"1ftGKQ22ZBSIX_d6KEpUI7vRczYgtQPMF","timestamp":1620983839237},{"file_id":"https://github.com/prateekjoshi565/Fine-Tuning-BERT/blob/master/Fine_Tuning_BERT_for_Spam_Classification.ipynb","timestamp":1619947106006}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"OFOTiqrtNvyy"},"source":["# Install Transformers Library"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7sYuExU3YiR4","executionInfo":{"status":"ok","timestamp":1626434557173,"user_tz":420,"elapsed":719,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"0d46c25d-e160-4494-dd23-c55ef15f18b1"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1hkhc10wNrGt","executionInfo":{"status":"ok","timestamp":1626434560498,"user_tz":420,"elapsed":2644,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"0a8fae61-dbd8-4e91-fe2f-6d4c131ac672"},"source":["!pip install transformers"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (4.8.2)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers) (4.6.1)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.45)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.41.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from transformers) (3.13)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (21.0)\n","Requirement already satisfied: huggingface-hub==0.0.12 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.12)\n","Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.10.3)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.7.4.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.5.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2021.5.30)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x4giRzM7NtHJ"},"source":["import numpy as np\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","import transformers\n","# from transformers import AutoModel, BertTokenizerFast\n","from transformers import RobertaTokenizer, RobertaModel\n","# specify GPU\n","device = torch.device(\"cuda\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"cwJrQFQgN_BE","executionInfo":{"status":"ok","timestamp":1626434833634,"user_tz":420,"elapsed":739,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"786711a5-2565-432b-adde-93ad79832762"},"source":["df = pd.read_json('/content/drive/MyDrive/sercasm/twitter/sarcasm_detection_shared_task_twitter_training.jsonl',lines=True)\n","df1 = pd.read_json('/content/drive/MyDrive/sercasm/twitter/sarcasm_detection_shared_task_twitter_testing.jsonl',lines=True)\n","dfarg = pd.read_json('/content/drive/MyDrive/sarcasm-detection/Datasets/reddit/sarcasm_detection_shared_task_reddit_training.jsonl',lines=True)\n","dfarg1 = pd.read_json('/content/drive/MyDrive/sarcasm-detection/Datasets/reddit/sarcasm_detection_shared_task_reddit_testing.jsonl',lines=True)\n","df['labels'] = df['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","df1['labels'] = df1['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","dfarg['labels'] = dfarg['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","dfarg1['labels'] = dfarg1['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","df1.tail()\n","dfarg1.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>context</th>\n","      <th>response</th>\n","      <th>id</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1795</th>\n","      <td>SARCASM</td>\n","      <td>[Spoiler Cristiane Justino vs. Amanda Nunes, H...</td>\n","      <td>she will probably beat him too. she can fight ...</td>\n","      <td>reddit_1796</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1796</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Treyarch makes the most unbalanced game ever....</td>\n","      <td>No, but then the game really glitch(ed) out fo...</td>\n","      <td>reddit_1797</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1797</th>\n","      <td>SARCASM</td>\n","      <td>[First Official Image from \"Zombieland: Double...</td>\n","      <td>&gt; Zombieland ~~2:~~ Double Tap They changed it...</td>\n","      <td>reddit_1798</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1798</th>\n","      <td>SARCASM</td>\n","      <td>[Its time to ban /r/The_Donald: Calling out sp...</td>\n","      <td>We're not *supporting racists* and prospective...</td>\n","      <td>reddit_1799</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1799</th>\n","      <td>SARCASM</td>\n","      <td>[59 Alabama ministers sign a letter saying Roy...</td>\n","      <td>Is she old enough to have Facebook</td>\n","      <td>reddit_1800</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            label  ... labels\n","1795      SARCASM  ...      0\n","1796  NOT_SARCASM  ...      1\n","1797      SARCASM  ...      0\n","1798      SARCASM  ...      0\n","1799      SARCASM  ...      0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"nTNAPWcclqqM"},"source":["from sklearn.utils import shuffle"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":420},"id":"xcrun5eEk_g2","executionInfo":{"status":"ok","timestamp":1626434834584,"user_tz":420,"elapsed":34,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"c25bfc40-c3ee-4ecf-8c85-91b34f0ea2bf"},"source":["shuffle(df,random_state=42)\n","shuffle(dfarg,random_state=42)\n","# df=shuffle(df,random_state=422)\n","# dfArg_r=shuffle(dfArg_r,random_state=422)\n","# dfarg"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>response</th>\n","      <th>context</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>274</th>\n","      <td>SARCASM</td>\n","      <td>Because Kentucky is such a crucial battlegroun...</td>\n","      <td>[Trump: Clinton should drop out if she loses K...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3430</th>\n","      <td>NOT_SARCASM</td>\n","      <td>Well you have to spin the xray emitter and the...</td>\n","      <td>[CT Scanner without a cover moving at full spe...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4324</th>\n","      <td>NOT_SARCASM</td>\n","      <td>I think the people who complain the most about...</td>\n","      <td>[The movement has begun guys, People who leave...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1027</th>\n","      <td>SARCASM</td>\n","      <td>Doesn't help when you have legendary melo clos...</td>\n","      <td>[Dennis Schroder hits the game winning 3 again...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1589</th>\n","      <td>SARCASM</td>\n","      <td>It's 2x2 tho, nobody cares about 2x2</td>\n","      <td>[Brain.exe has stopped working, I don't unders...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3444</th>\n","      <td>NOT_SARCASM</td>\n","      <td>Or we can lead and come up with innovative sol...</td>\n","      <td>[Many potential homebuyers find Denver price t...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>466</th>\n","      <td>SARCASM</td>\n","      <td>Nah, it's all a conspiracy by the Clinton camp...</td>\n","      <td>[FBI Admits Clinton Used Software Designed To ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3092</th>\n","      <td>NOT_SARCASM</td>\n","      <td>Do you have a source for how much the NSA has ...</td>\n","      <td>[US economy grows just 0.1% as weather blamed ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3772</th>\n","      <td>NOT_SARCASM</td>\n","      <td>I kind of wish he'd go back to a Mitch-style d...</td>\n","      <td>[For those of you who saw Hannibal Buress' new...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>860</th>\n","      <td>SARCASM</td>\n","      <td>Of course you don't have a job, you study phys...</td>\n","      <td>[Redditors who look forward to working on Mond...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4400 rows × 4 columns</p>\n","</div>"],"text/plain":["            label  ... labels\n","274       SARCASM  ...      0\n","3430  NOT_SARCASM  ...      1\n","4324  NOT_SARCASM  ...      1\n","1027      SARCASM  ...      0\n","1589      SARCASM  ...      0\n","...           ...  ...    ...\n","3444  NOT_SARCASM  ...      1\n","466       SARCASM  ...      0\n","3092  NOT_SARCASM  ...      1\n","3772  NOT_SARCASM  ...      1\n","860       SARCASM  ...      0\n","\n","[4400 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CAdC6hHZlaFx","executionInfo":{"status":"ok","timestamp":1626434834585,"user_tz":420,"elapsed":32,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"93802958-9cf7-4ede-d3bb-ac4cccfb3b4b"},"source":["print(df['response'])\n","print(dfarg['response'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0       @USER @USER @USER I don't get this .. obviousl...\n","1       @USER @USER trying to protest about . Talking ...\n","2       @USER @USER @USER He makes an insane about of ...\n","3       @USER @USER Meanwhile Trump won't even release...\n","4       @USER @USER Pretty Sure the Anti-Lincoln Crowd...\n","                              ...                        \n","4995    @USER You don't . I have purchased a lot on Am...\n","4996    @USER #Emotions you say 🤔 never knew that I th...\n","4997    @USER @USER @USER You are so right ... \" Yes !...\n","4998    @USER @USER @USER Another lazy delusional vote...\n","4999    @USER @USER I hope you know no news outlet fro...\n","Name: response, Length: 5000, dtype: object\n","0       Yeah I mean there's only one gender anyways, w...\n","1       Sounds like you don't like science, you theist...\n","2       Ofc play them in try mode, Blizzard were so ge...\n","3       I don't understand, Reddit told me that Hillar...\n","4       yeh, they're the reigning triple premiers, why...\n","                              ...                        \n","4395    well you could've been adulting if you hadn't ...\n","4396                   Also they'll have to join the euro\n","4397    plot: AI assists a cyborg in freelance investi...\n","4398    Some airlines proposed this but too much publi...\n","4399    Any number of corporate shill organizations ba...\n","Name: response, Length: 4400, dtype: object\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DIY6yOMr8sdX","executionInfo":{"status":"ok","timestamp":1626434839905,"user_tz":420,"elapsed":5336,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"e74521b0-1a00-41ef-ab49-8d6b89d7db60"},"source":["import pandas as pd\n","import re\n","import nltk\n","from nltk.stem import WordNetLemmatizer\n","from nltk.tokenize import RegexpTokenizer\n","from nltk.corpus import stopwords\n","import re\n","import string\n","import numpy as np\n","from nltk.corpus import stopwords\n","from nltk.stem import PorterStemmer\n","from nltk.tokenize import TweetTokenizer\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from tqdm.auto import tqdm\n","!pip install demoji\n","!pip install contractions\n","import demoji\n","import contractions\n","\n","demoji.download_codes()\n","nltk.download('stopwords') \n","# nltk.download('wordnet')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: demoji in /usr/local/lib/python3.7/dist-packages (0.4.0)\n","Requirement already satisfied: colorama in /usr/local/lib/python3.7/dist-packages (from demoji) (0.4.4)\n","Requirement already satisfied: requests<3.0.0 in /usr/local/lib/python3.7/dist-packages (from demoji) (2.23.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0->demoji) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0->demoji) (2021.5.30)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0->demoji) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0->demoji) (3.0.4)\n","Requirement already satisfied: contractions in /usr/local/lib/python3.7/dist-packages (0.0.52)\n","Requirement already satisfied: textsearch>=0.0.21 in /usr/local/lib/python3.7/dist-packages (from contractions) (0.0.21)\n","Requirement already satisfied: pyahocorasick in /usr/local/lib/python3.7/dist-packages (from textsearch>=0.0.21->contractions) (1.4.2)\n","Requirement already satisfied: anyascii in /usr/local/lib/python3.7/dist-packages (from textsearch>=0.0.21->contractions) (0.2.0)\n","Downloading emoji data ...\n","... OK (Got response in 0.16 seconds)\n","Writing emoji data to /root/.demoji/codes.json ...\n","... OK\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"Z5qBvDp14S4z"},"source":["def preprocess_text(text):\n","    # Tokenise words while ignoring punctuation(https://www.nltk.org/_modules/nltk/tokenize/regexp.html)\n","    text = re.sub(r\"@\",'', text)\n","    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n","    text = re.sub(r\"USER\",'@USER', text)\n","    # text = re.sub(r\"USER\",'', text)\n","    text = re.sub(r'<URL>','',text)\n","\n","    text = demoji.replace_with_desc(text)\n","    text = re.sub(r':','',text)\n","    text = contractions.fix(text)\n","    # text = re.sub(r'\\.+','',text)\n","    # tokeniser = RegexpTokenizer(r'\\s+', gaps=True)\n","    # tokeniser = RegexpTokenizer('\\w+|\\$[\\d\\.]+|\\S+')\n","    # tokeniser = RegexpTokenizer(r'\\w+')\n","    # tokens = tokeniser.tokenize(text)\n","\n","    # Lowercase and lemmatise \n","    # lemmatiser = WordNetLemmatizer()\n","    # lemmas = [lemmatiser.lemmatize(token.lower(), pos='v') for token in tokens]\n","    \n","    # Remove stopwords\n","    # keywords= [lemma for lemma in lemmas if lemma not in stopwords.words('english')]\n","    \n","    # stemming\n","    # ps=PorterStemmer()\n","    # keywords=[ps.stem(x) for x in keywords]\n","    return text\n","\n","def preprocess_text2(tweet):\n","    \"\"\"Process tweet function.\n","    Input:\n","        tweet: a string containing a tweet\n","    Output:\n","        tweets_clean: a list of words containing the processed tweet\n","\n","    \"\"\"\n","    stemmer = PorterStemmer()\n","    stopwords_english = stopwords.words('english')\n","    # remove stock market tickers like $GE\n","    tweet = re.sub(r'\\$\\w*', '', tweet)\n","    # remove old style retweet text \"RT\"\n","    tweet = re.sub(r'^RT[\\s]+', '', tweet)\n","    # remove hyperlinks\n","    tweet = re.sub(r'https?:\\/\\/.*[\\r\\n]*', '', tweet)\n","    # remove hashtags\n","    # only removing the hash # sign from the word\n","    tweet = re.sub(r'#', '', tweet)\n","    # tokenize tweets\n","    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n","                               reduce_len=True)\n","    tweet_tokens = tokenizer.tokenize(tweet)\n","\n","    tweets_clean = []\n","    for word in tweet_tokens:\n","        if (word not in stopwords_english and  # remove stopwords\n","                word not in string.punctuation):  # remove punctuation (optional)\n","            # tweets_clean.append(word)\n","            stem_word = stemmer.stem(word)  # stemming word\n","            tweets_clean.append(stem_word)\n","\n","    return tweets_clean"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nj-zpWUjt0IB"},"source":["def fun(A,l):\n","  if len(A)<=l:\n","    return A\n","  else:\n","    return A[-l::1]\n","    # return A[-1:-l-1:-1]\n","def fun1(A):\n","  return ''.join(A)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y3DFJt513x7X"},"source":["l=3\n","\n","\n","\n","dfarg['tweets']= dfarg['context'].apply(fun,args=[l]).apply(fun1) +'reply-'+ dfarg['response']\n","dfarg1['tweets']= dfarg1['context'].apply(fun,args=[l]).apply(fun1) +'reply-'+ dfarg1['response']\n","\n","df['tweets']= df['context'].apply(fun,args=[l]).apply(fun1) +'reply-'+ df['response']\n","df1['tweets']= df1['context'].apply(fun,args=[l]).apply(fun1) +'reply-'+ df1['response']\n","\n","dfarg['tweets']= dfarg['tweets'].apply(preprocess_text) \n","dfarg1['tweets']=dfarg1['tweets'].apply(preprocess_text)\n","df['tweets']= df['tweets'].apply(preprocess_text) \n","df1['tweets']=df1['tweets'].apply(preprocess_text)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aXZsczcOTY0J"},"source":["df=pd.concat([df, dfarg])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l60ZLHKdTbGe"},"source":["# df3=pd.concat(df['tweets'].values,dfArg_r['tweets'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nHEuLpUFUY4D"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"676DPU1BOPdp"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mjLmL_LFtVjo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626434870337,"user_tz":420,"elapsed":26,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"7369d23e-75b1-4981-b29a-80545133eb57"},"source":["df['tweets']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       A minor child deserves privacy and should be k...\n","1       @USER Why is he a loser ? he is just a Press S...\n","2       Donald J . Trump is guilty as charged . The ev...\n","3       Jamie Raskin tanked Doug Collins . Collins loo...\n","4       Man ... y ’ all gone “ both sides ” the apocal...\n","                              ...                        \n","4395    8-9ft man found in ancient indian burial mound...\n","4396    Second Scottish independence referendum 'on th...\n","4397    Pinoy Cyborg by James SimmonsMag-ingat sa ridi...\n","4398    No it is not, for one that 747 is gutted and i...\n","4399    TIL One of the founding members of Greenpeace ...\n","Name: tweets, Length: 9400, dtype: object"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"MKfWnApvOoE7"},"source":["# Split train dataset into train, validation and test sets"]},{"cell_type":"code","metadata":{"id":"mfhSPF5jOWb7"},"source":["\n","X_s = df['tweets'].values\n","# xss= dfarg['tweets'].values\n","# X_s = np.concatenate((X_s, xss))\n","y_s = df['labels'].values\n","# yss=dfarg['labels'].values\n","# y_s=arr = np.concatenate((y_s, yss))\n","\n","Xt_s = df1['tweets'].values\n","yt_s = df1['labels'].values\n","\n","Xt_sr = dfarg1['tweets'].values\n","yt_sr = dfarg1['labels'].values\n","\n","train_text, temp_text, train_labels, temp_labels = X_s,Xt_s,y_s,yt_s\n","\n","# we will use temp_text and temp_labels to create validation and test set\n","# val_text, test_text, val_labels, test_labels = train_test_split(temp_text, temp_labels, \n","#                                                                 random_state=2018, \n","#                                                                 test_size=0.5, \n","#                                                                 stratify=temp_labels)\n","val_text, test_text, val_labels, test_labels=temp_text, Xt_sr, temp_labels, yt_sr\n","\n","# X_train, X_test, y_train, y_test = train_test_split(X_s, y_s, test_size=0.2, random_state=42)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BQ9Z2-eOWo21","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626434870338,"user_tz":420,"elapsed":23,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"35e925bd-b36a-4878-dc0c-5753a8f85263"},"source":["y_s.size"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9400"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"W1jEFb39cCjk"},"source":["# pip install -U sentence-transformers"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n7hsdLoCO7uB"},"source":["# Import BERT Model and BERT Tokenizer\n","\n","---\n","\n","\n","\n","---\n","\n"]},{"cell_type":"code","metadata":{"id":"S1kY3gZjO2RE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626434876945,"user_tz":420,"elapsed":6624,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"770d8076-db20-46a1-9a5c-f2be3a0578c8"},"source":["# import BERT-base pretrained model\n","# bert = AutoModel.from_pretrained('bert-base-uncased')\n","\n","# # Load the BERT tokenizer\n","# tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\n","# import BERT-base pretrained model\n","\n","\n","# from transformers import RobertaTokenizer, TFRobertaModel\n","# bert = RobertaModel.from_pretrained('roberta-base')\n","\n","# # Load the BERT tokenizer\n","# tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n","\n","from transformers import RobertaTokenizer, TFRobertaModel\n","bert = RobertaModel.from_pretrained('roberta-large')\n","\n","# Load the BERT tokenizer\n","tokenizer = RobertaTokenizer.from_pretrained('roberta-large')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Some weights of the model checkpoint at roberta-large were not used when initializing RobertaModel: ['lm_head.layer_norm.bias', 'lm_head.decoder.weight', 'lm_head.dense.weight', 'lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.bias']\n","- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_zOKeOMeO-DT"},"source":["# sample data\n","text = [\"this is a bert model tutorial\", \"we will fine-tune a bert model\"]\n","# encode text\n","sent_id = tokenizer.batch_encode_plus(text, padding=True, return_token_type_ids=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oAH73n39PHLw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626434876961,"user_tz":420,"elapsed":62,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"ce66e736-575a-40b2-ac86-0d1fb24fcf64"},"source":["# output\n","print(sent_id)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'input_ids': [[0, 9226, 16, 10, 741, 2399, 1421, 35950, 2, 1, 1, 1], [0, 1694, 40, 2051, 12, 90, 4438, 10, 741, 2399, 1421, 2]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8wIYaWI_Prg8"},"source":["# Tokenization"]},{"cell_type":"code","metadata":{"id":"yKwbpeN_PMiu"},"source":["# # get length of all the messages in the train set\n","# seq_len = [len(i.split()) for i in train_text]\n","# for i in train_text:\n","#   print(i)\n","# pd.Series(seq_len).hist(bins = 30)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OXcswEIRPvGe"},"source":["# max_seq_len = 180\n","max_seq_len = 120"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGcvb0cV5irf","colab":{"base_uri":"https://localhost:8080/","height":333},"executionInfo":{"status":"error","timestamp":1626434876985,"user_tz":420,"elapsed":77,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"0335e7e4-bdab-47e4-af4b-a529bf155d1d"},"source":["total=0\n","for i in range(9400):\n","  total+=len(df['tweets'][i].split(' '))\n","total/9400"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-18000ed45fbe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtotal\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m9400\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mtotal\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'tweets'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mtotal\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m9400\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5139\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5140\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5141\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5143\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'split'"]}]},{"cell_type":"code","metadata":{"id":"tk5S7DWaP2t6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626435307275,"user_tz":420,"elapsed":9570,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"f0b96bc3-fada-4771-ba0c-d1f8df500673"},"source":["# tokenize and encode sequences in the training set\n","tokens_train = tokenizer.batch_encode_plus(\n","    train_text.tolist(),\n","    max_length = max_seq_len,\n","    pad_to_max_length=True,\n","    truncation=True,\n","    return_token_type_ids=False\n",")\n","\n","# tokenize and encode sequences in the validation set\n","tokens_val = tokenizer.batch_encode_plus(\n","    val_text.tolist(),\n","    max_length = max_seq_len,\n","    pad_to_max_length=True,\n","    truncation=True,\n","    return_token_type_ids=False\n",")\n","\n","# tokenize and encode sequences in the test set\n","tokens_test = tokenizer.batch_encode_plus(\n","    test_text.tolist(),\n","    max_length = max_seq_len,\n","    pad_to_max_length=True,\n","    truncation=True,\n","    return_token_type_ids=False\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2132: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n","  FutureWarning,\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"Wsm8bkRZQTw9"},"source":["# Convert Integer Sequences to Tensors"]},{"cell_type":"code","metadata":{"id":"QR-lXwmzQPd6"},"source":["# for train set\n","train_seq = torch.tensor(tokens_train['input_ids'])\n","train_mask = torch.tensor(tokens_train['attention_mask'])\n","train_y = torch.tensor(train_labels.tolist())\n","\n","# for validation set\n","val_seq = torch.tensor(tokens_val['input_ids'])\n","val_mask = torch.tensor(tokens_val['attention_mask'])\n","val_y = torch.tensor(val_labels.tolist())\n","\n","# for test set\n","test_seq = torch.tensor(tokens_test['input_ids'])\n","test_mask = torch.tensor(tokens_test['attention_mask'])\n","test_y = torch.tensor(test_labels.tolist())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ov1cOBlcRLuk"},"source":["# Create DataLoaders"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3brEq1klIGNQ","executionInfo":{"status":"ok","timestamp":1626436188524,"user_tz":420,"elapsed":428,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"cab494e2-b7e7-4c46-f9ec-58637f43215e"},"source":["train_seq"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[    0,   250,  3694,  ...,     1,     1,     1],\n","        [    0,  1039, 47955,  ...,     1,     1,     1],\n","        [    0, 19195,   344,  ...,     1,     1,     1],\n","        ...,\n","        [    0, 44670,  2160,  ...,     1,     1,     1],\n","        [    0,  3084,    24,  ...,     1,     1,     1],\n","        [    0,   565,  3063,  ...,     1,     1,     1]])"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"qUy9JKFYQYLp"},"source":["from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","\n","#define a batch size\n","batch_size = 32\n","\n","# wrap tensors\n","train_data = TensorDataset(train_seq, train_mask, train_y)\n","\n","# sampler for sampling the data during training\n","train_sampler = RandomSampler(train_data)\n","\n","# dataLoader for train set\n","train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n","\n","# wrap tensors\n","val_data = TensorDataset(val_seq, val_mask, val_y)\n","\n","# sampler for sampling the data during training\n","val_sampler = SequentialSampler(val_data)\n","\n","# dataLoader for validation set\n","val_dataloader = DataLoader(val_data, sampler = val_sampler, batch_size=batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"K2HZc5ZYRV28"},"source":["# Freeze BERT Parameters"]},{"cell_type":"code","metadata":{"id":"wHZ0MC00RQA_"},"source":["# freeze all the parameters\n","for param in bert.parameters():\n","    param.requires_grad = True\n","# print(bert)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s7ahGBUWRi3X"},"source":["# Define Model Architecture"]},{"cell_type":"code","metadata":{"id":"b3iEtGyYRd0A"},"source":["class BERT_Arch(nn.Module):\n","\n","    def __init__(self, bert):\n","      \n","      super(BERT_Arch, self).__init__()\n","\n","      self.bert = bert \n","      \n","      # dropout layer\n","      self.dropout = nn.Dropout(0.25)\n","      \n","      # relu activation function\n","      self.relu =  nn.ReLU()\n","\n","      # dense layer 1\n","      # self.fc1 = nn.Linear(768,256)\n","      self.fc1 = nn.Linear(1024,256)\n","      # dense layer 2 (Output layer)\n","      self.fc2 = nn.Linear(256,2)\n","\n","      #softmax activation function\n","      self.softmax = nn.LogSoftmax(dim=1)\n","\n","    #define the forward pass\n","    def forward(self, sent_id, mask):\n","\n","      #pass the inputs to the model  \n","      _, cls_hs = self.bert(sent_id,mask, return_dict=False)\n","      # print(\"dfghjjhfchgbhlvmb jfbvfddvfgbhnjhgvcvtynubtrvcebnuexcvbnbtvrcedcvbnjbnjn11111 \",cls_hs.shape)\n","      x = self.fc1(cls_hs)\n","      # print(\"dfghjjhfchgbhlvmb jfbvfddvfgbhnjhgvcvtynubtrvcebnuexcvbnbtvrcedcvbnjbnjn22222 \",x.shape)\n","      x = self.relu(x)\n","      # print(\"dfghjjhfchgbhlvmb jfbvfddvfgbhnjhgvcvtynubtrvcebnuexcvbnbtvrcedcvbnjbnjn22222 \",x.shape)\n","      x = self.dropout(x)\n","      # print(\"dfghjjhfchgbhlvmb jfbvfddvfgbhnjhgvcvtynubtrvcebnuexcvbnbtvrcedcvbnjbnjn22222 \",x.shape)\n","      # output layer\n","      x = self.fc2(x)\n","      # print(\"dfghjjhfchgbhlvmb jfbvfddvfgbhnjhgvcvtynubtrvcebnuexcvbnbtvrcedcvbnjbnjn22222 \",x.shape)\n","      # apply softmax activation\n","      x = self.softmax(x)\n","      # print(\"dfghjjhfchgbhlvmb jfbvfddvfgbhnjhgvcvtynubtrvcebnuexcvbnbtvrcedcvbnjbnjn22222 \",x.shape)\n","      return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cBAJJVuJRliv"},"source":["# pass the pre-trained BERT to our define architecture\n","model = BERT_Arch(bert)\n","\n","# push the model to GPU\n","model = model.to(device)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"taXS0IilRn9J"},"source":["# optimizer from hugging face transformers\n","from transformers import AdamW\n","\n","# define the optimizer\n","optimizer = AdamW(model.parameters(), lr = 1e-5)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j9CDpoMQR_rK"},"source":["# Find Class Weights"]},{"cell_type":"code","metadata":{"id":"izY5xH5eR7Ur","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626435312178,"user_tz":420,"elapsed":115,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"ddb01ac5-025f-4c29-b53a-b90023c701a5"},"source":["from sklearn.utils.class_weight import compute_class_weight\n","\n","#compute the class weights\n","class_wts = compute_class_weight('balanced', np.unique(train_labels), train_labels)\n","\n","print(class_wts)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1. 1.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"r1WvfY2vSGKi"},"source":["# convert class weights to tensor\n","weights= torch.tensor(class_wts,dtype=torch.float)\n","weights = weights.to(device)\n","\n","# loss function\n","cross_entropy  = nn.NLLLoss(weight=weights) \n","\n","# number of training epochs\n","epochs = 10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"My4CA0qaShLq"},"source":["# Fine-Tune BERT"]},{"cell_type":"code","metadata":{"id":"rskLk8R_SahS"},"source":["# function to train the model\n","def train():\n","  \n","  model.train()\n","\n","  total_loss, total_accuracy = 0, 0\n","  \n","  # empty list to save model predictions\n","  total_preds=[]\n","  \n","  # iterate over batches\n","  for step,batch in enumerate(train_dataloader):\n","    \n","    # progress update after every 50 batches.\n","    if step % 50 == 0 and not step == 0:\n","      print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(train_dataloader)))\n","\n","    # push the batch to gpu\n","    batch = [r.to(device) for r in batch]\n"," \n","    sent_id, mask, labels = batch\n","\n","    # clear previously calculated gradients \n","    model.zero_grad()        \n","\n","    # get model predictions for the current batch\n","    preds = model(sent_id, mask)\n","\n","    # compute the loss between actual and predicted values\n","    loss = cross_entropy(preds, labels)\n","\n","    # add on to the total loss\n","    total_loss = total_loss + loss.item()\n","\n","    # backward pass to calculate the gradients\n","    loss.backward()\n","\n","    # clip the the gradients to 1.0. It helps in preventing the exploding gradient problem\n","    torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n","\n","    # update parameters\n","    optimizer.step()\n","\n","    # model predictions are stored on GPU. So, push it to CPU\n","    preds=preds.detach().cpu().numpy()\n","\n","    # append the model predictions\n","    total_preds.append(preds)\n","\n","  # compute the training loss of the epoch\n","  avg_loss = total_loss / len(train_dataloader)\n","  \n","  # predictions are in the form of (no. of batches, size of batch, no. of classes).\n","  # reshape the predictions in form of (number of samples, no. of classes)\n","  total_preds  = np.concatenate(total_preds, axis=0)\n","\n","  #returns the loss and predictions\n","  return avg_loss, total_preds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yGXovFDlSxB5"},"source":["# function for evaluating the model\n","def evaluate():\n","  \n","  print(\"\\nEvaluating...\")\n","  \n","  # deactivate dropout layers\n","  model.eval()\n","\n","  total_loss, total_accuracy = 0, 0\n","  \n","  # empty list to save the model predictions\n","  total_preds = []\n","\n","  # iterate over batches\n","  for step,batch in enumerate(val_dataloader):\n","    \n","    # Progress update every 50 batches.\n","    if step % 50 == 0 and not step == 0:\n","      \n","      # Calculate elapsed time in minutes.\n","      # elapsed = format_time(time.time() - t0)\n","            \n","      # Report progress.\n","      print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(val_dataloader)))\n","\n","    # push the batch to gpu\n","    batch = [t.to(device) for t in batch]\n","\n","    sent_id, mask, labels = batch\n","\n","    # deactivate autograd\n","    with torch.no_grad():\n","      \n","      # model predictions\n","      preds = model(sent_id, mask)\n","\n","      # compute the validation loss between actual and predicted values\n","      loss = cross_entropy(preds,labels)\n","\n","      total_loss = total_loss + loss.item()\n","\n","      preds = preds.detach().cpu().numpy()\n","\n","      total_preds.append(preds)\n","\n","  # compute the validation loss of the epoch\n","  avg_loss = total_loss / len(val_dataloader) \n","\n","  # reshape the predictions in form of (number of samples, no. of classes)\n","  total_preds  = np.concatenate(total_preds, axis=0)\n","\n","  return avg_loss, total_preds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WHQlio6yM_QH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626435312183,"user_tz":420,"elapsed":94,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"ef78d384-ca08-446e-b19f-5bc536f86506"},"source":["from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n","!nvidia-smi"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Fri Jul 16 11:35:16 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 470.42.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   38C    P0    26W /  70W |   2436MiB / 15109MiB |      6%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9KZEgxRRTLXG"},"source":["# Start Model Training"]},{"cell_type":"code","metadata":{"id":"k1USGTntS3TS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436015437,"user_tz":420,"elapsed":703335,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"9674f179-5d74-48ba-e63a-779455fc540f"},"source":["# set initial loss to infinite\n","best_valid_loss = float('inf')\n","\n","# empty lists to store training and validation loss of each epoch\n","train_losses=[]\n","valid_losses=[]\n","\n","#for each epoch\n","epochs=1\n","for epoch in range(epochs):\n","\n","    print('\\n Epoch {:} / {:}'.format(epoch + 1, epochs))\n","\n","    #train model\n","    train_loss,_ = train()\n","\n","    #evaluate model\n","    valid_loss, _ = evaluate()\n","\n","    #save the best model\n","    # if valid_loss < best_valid_loss:\n","    best_valid_loss = valid_loss\n","    torch.save(model.state_dict(), 'saved_weights.pt')\n","\n","    # append training and validation loss\n","    train_losses.append(train_loss)\n","    valid_losses.append(valid_loss)\n","    # get predictions for test data\n","    !nvidia-smi\n","    # with torch.no_grad():\n","    #   preds = model(test_seq.to(device), test_mask.to(device))\n","    #   preds = preds.detach().cpu().numpy()\n","    # preds = np.argmax(preds, axis = 1)\n","    # print(classification_report(test_y, preds))\n","    # print(accuracy_score(test_y, preds))\n","    print(f'\\nTraining Loss: {train_loss:.3f}')\n","    print(f'Validation Loss: {valid_loss:.3f}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n"," Epoch 1 / 1\n","  Batch    50  of    294.\n","  Batch   100  of    294.\n","  Batch   150  of    294.\n","  Batch   200  of    294.\n","  Batch   250  of    294.\n","\n","Evaluating...\n","  Batch    50  of     57.\n","Fri Jul 16 11:46:59 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 470.42.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   73C    P0    33W /  70W |  15092MiB / 15109MiB |      3%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n","\n","Training Loss: 0.629\n","Validation Loss: 0.565\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_yrhUc9kTI5a"},"source":["# Load Saved Model"]},{"cell_type":"code","metadata":{"id":"OacxUyizS8d1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436016118,"user_tz":420,"elapsed":688,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"863f5827-b9b5-4487-9500-d73244afbff7"},"source":["#load weights of best model\n","path = 'saved_weights.pt'\n","model.load_state_dict(torch.load(path))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"x4SVftkkTZXA"},"source":["# Get Predictions for Test Data"]},{"cell_type":"code","metadata":{"id":"NZl0SZmFTRQA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436060128,"user_tz":420,"elapsed":44015,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"45179be0-22a4-466f-89e1-75034f79e468"},"source":["pred=[]\n","with torch.no_grad():\n","  for i in range(0,90):\n","    preds = model(test_seq[i*20:i*20+20].to(device), test_mask[i*20:i*20+20].to(device))\n","    preds = preds.detach().cpu().numpy()\n","    pred.append(preds)\n","print(np.array(pred).shape)\n","# pred=[]\n","# with torch.no_grad():\n","#   for i in range(0,90):\n","#     preds = model(val_seq[i*20:i*20+20].to(device), val_mask[i*20:i*20+20].to(device))\n","#     preds = preds.detach().cpu().numpy()\n","#     pred.append(preds)\n","# print(np.array(pred).shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(90, 20, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6B_RRpaRZasd"},"source":["pred1=np.array(pred)\n","# pred1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xdmgFp35ZWfb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436060131,"user_tz":420,"elapsed":57,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"eedd5c43-f8c9-4fcb-c944-52ea8c1ad867"},"source":["pred2=pred1.reshape((1800,2))\n","pred2.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1800, 2)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"nQ_1m2WhgL7k"},"source":["p=pd.DataFrame(pred2)\n","p.to_csv('context_2.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d8su6xM8gSNJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436060133,"user_tz":420,"elapsed":52,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"c10ecfef-f4e9-4701-aeed-1b50e6a1ac0a"},"source":["pred3 = np.argmax(pred2, axis = 1)\n","pred3 "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 1, ..., 0, 0, 1])"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"ZMw2NRnngSQs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436060134,"user_tz":420,"elapsed":48,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"ae6ea63d-10ae-43c5-c7e3-7e5a003c3e60"},"source":["# print(classification_report(val_y, pred3))\n","print(classification_report(test_y, pred3))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.65      0.73      0.69       900\n","           1       0.69      0.60      0.64       900\n","\n","    accuracy                           0.67      1800\n","   macro avg       0.67      0.67      0.66      1800\n","weighted avg       0.67      0.67      0.66      1800\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5K4dl1AQgShx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626436060135,"user_tz":420,"elapsed":45,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"b8b9e767-7a6a-4c9c-948b-7b07f7022648"},"source":["# confusion matrix\n","# print(pred)\n","pd.crosstab(test_y, pred3)\n","from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n","\n","print(accuracy_score(test_y, pred3))\n","# print(accuracy_score(val_y, pred3))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.665\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"W14537b4ubb6"},"source":["import scipy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G0psIEgeubdz","colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"status":"error","timestamp":1626436060155,"user_tz":420,"elapsed":59,"user":{"displayName":"abhishek ranjan","photoUrl":"","userId":"07093215491084358593"}},"outputId":"fc2c1ae9-1376-47ff-f5f5-0dff62d847c8"},"source":["brcc=pd.read_csv('76.6_roberta_large_100_32_2e-5_4epoch_preprocessing+@reply+user.csv')\n","brcc=np.array(brcc[['0','1']])\n","brcc=scipy.special.softmax(brcc,axis=1)\n","# bsvm=np.multiply(bsvm,-1)\n","brcc"],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-69-6e501d934cdd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbrcc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'76.6_roberta_large_100_32_2e-5_4epoch_preprocessing+@reply+user.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mbrcc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbrcc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'0'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mbrcc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspecial\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msoftmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbrcc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# bsvm=np.multiply(bsvm,-1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mbrcc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    686\u001b[0m     )\n\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 688\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    689\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    452\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 454\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    946\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 948\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1178\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1180\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1181\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   2008\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2009\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2010\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2011\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '76.6_roberta_large_100_32_2e-5_4epoch_preprocessing+@reply+user.csv'"]}]},{"cell_type":"code","metadata":{"id":"1eyDGkYuubhK"},"source":["brc=pd.read_csv('77.44_1context+response_batch16+3epoch_180maxlen.csv')\n","brc=np.array(brc[['0','1']])\n","brc=scipy.special.softmax(brc,axis=1)\n","# bsvm=np.multiply(bsvm,-1)\n","brc"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ms1ObHZxTYSI"},"source":["br=pd.read_csv('77.7_2context+response_batch16+4epoch_190maxlen.csv')\n","br=np.array(br[['0','1']])\n","br=scipy.special.softmax(br,axis=1)\n","# bsvm=np.multiply(bsvm,-1)\n","br"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YqzLS7rHTp4T"},"source":["bc=pd.read_csv('76.56_2context_+response_temserflow.csv')\n","bc=np.array(bc[['0','1']])\n","bc=scipy.special.softmax(bc,axis=1)\n","# bsvm=np.multiply(bsvm,-1)\n","bc"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0_HPa0uXH6he"},"source":["bkc=pd.read_csv('75_lstm_base_response.csv')\n","bkc=np.array(bkc[['0','1']])\n","bkc=scipy.special.softmax(bkc,axis=1)\n","# bsvm=np.multiply(bsvm,-1)\n","bkc"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jpX1uTwjUPY6"},"source":["# bertc=np.array(bc[['0','1']])\n","bertc1=np.multiply(bc,0.6)\n","\n","# bertrcc=np.array(brcc[['0','1']])\n","bertrcc1=np.multiply(brcc,0.8)\n","\n","# bertcr=np.array(brc[['0','1']])\n","bertcr1=np.multiply(brc,0.6)\n","\n","# bertr=np.array(br[['0','1']])\n","bertr1=np.multiply(br,0.45)\n","\n","\n","\n","# # bertc=np.array(bc[['0','1']])\n","# bertc1=np.multiply(bc,0.4)\n","\n","# # bertrcc=np.array(brcc[['0','1']])\n","# bertrcc1=np.multiply(brcc,0.8)\n","\n","# # bertcr=np.array(brc[['0','1']])\n","# bertcr1=np.multiply(brc,0.4)\n","\n","# bertr=np.array(br[['0','1']])\n","# bertr1=np.multiply(br,0.8)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BY2P7H1W2Wo4"},"source":["yhats = [bertc1,bertr1,bertcr1,bertrcc1]\n","# yhats = [bertcr1,bertrcc1,bertr1]\n","# yhats = [bertcr1,bertrcc1,bertr1]\n","# import numpy as np\n","# yhats = np.array(yhats)\n","\n","# # sum across ensemble members\n","# summed = np.sum(yhats, axis=0)\n","# # argmax across classes\n","# result = np.argmax(summed, axis=1)\n","\n","# from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n","# accuracy_score(result,test_y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"33vNifQf_Ojz"},"source":["ans=[]\n","yhat=[bc,br,brcc,brc,bkc]\n","# yhat=[brcc,br,brc]\n","for i in yhat:\n","  ans.append(np.argmax(i, axis=1))\n","summed = np.sum(ans, axis=0)/4\n","res=[]\n","for i in summed:\n","  if i<=0.5:\n","    res.append(0)\n","  else:\n","    res.append(1)\n","\n","print(res)\n","\n","from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n","# accuracy_score(res,test_y)\n","\n","\n","print(classification_report(test_y, res))\n","from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n","\n","print(accuracy_score(test_y, res))"],"execution_count":null,"outputs":[]}]}