{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN-RNN(Glove)-reddit","provenance":[{"file_id":"1bKR-tNhUqdp1HMZVh9x0zLIq8JC7trYU","timestamp":1622060234400},{"file_id":"1FJ7TUopKrbctHjGNexeabGc8ApKN73WY","timestamp":1621421169230}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"DzP-MutDax4y"},"source":["#CNN model\n","https://arxiv.org/abs/1610.08815"]},{"cell_type":"code","metadata":{"id":"56oRUl9LbR_p","executionInfo":{"status":"ok","timestamp":1622060303944,"user_tz":-330,"elapsed":2572,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["import pandas as pd\n","import numpy as np\n","from numpy import asarray\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","\n","import pydotplus as pyd\n","\n","import keras\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.models import Model\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard, EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.layers import Dense, Input, Flatten, Embedding, Conv1D, MaxPooling1D, Dropout, BatchNormalization, Activation, concatenate"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"lgBPQSktfKSF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060359470,"user_tz":-330,"elapsed":4,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"d61657c4-2ddd-44ca-eae9-865270efc004"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rxBpLQHwexnh","colab":{"base_uri":"https://localhost:8080/","height":198},"executionInfo":{"status":"ok","timestamp":1622060361299,"user_tz":-330,"elapsed":1276,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"9447ab87-a1af-4683-d451-dad6dd6f2e06"},"source":["df1 = pd.read_json('/content/drive/MyDrive/sarcasm/reddit/sarcasm_detection_shared_task_reddit_testing.jsonl',lines=True)\n","df = pd.read_json('/content/drive/MyDrive/sarcasm/reddit/sarcasm_detection_shared_task_reddit_training.jsonl',lines=True)\n","\n","df['labels'] = df['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","df1['labels'] = df1['label'].apply(lambda x: ['SARCASM', 'NOT_SARCASM'].index(x))\n","df1.tail()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>context</th>\n","      <th>response</th>\n","      <th>id</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1795</th>\n","      <td>SARCASM</td>\n","      <td>[Spoiler Cristiane Justino vs. Amanda Nunes, H...</td>\n","      <td>she will probably beat him too. she can fight ...</td>\n","      <td>reddit_1796</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1796</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Treyarch makes the most unbalanced game ever....</td>\n","      <td>No, but then the game really glitch(ed) out fo...</td>\n","      <td>reddit_1797</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1797</th>\n","      <td>SARCASM</td>\n","      <td>[First Official Image from \"Zombieland: Double...</td>\n","      <td>&gt; Zombieland ~~2:~~ Double Tap They changed it...</td>\n","      <td>reddit_1798</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1798</th>\n","      <td>SARCASM</td>\n","      <td>[Its time to ban /r/The_Donald: Calling out sp...</td>\n","      <td>We're not *supporting racists* and prospective...</td>\n","      <td>reddit_1799</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1799</th>\n","      <td>SARCASM</td>\n","      <td>[59 Alabama ministers sign a letter saying Roy...</td>\n","      <td>Is she old enough to have Facebook</td>\n","      <td>reddit_1800</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            label  ... labels\n","1795      SARCASM  ...      0\n","1796  NOT_SARCASM  ...      1\n","1797      SARCASM  ...      0\n","1798      SARCASM  ...      0\n","1799      SARCASM  ...      0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"_DCnpNDeal4y"},"source":[""]},{"cell_type":"code","metadata":{"id":"VIICpa5-Zona","executionInfo":{"status":"ok","timestamp":1622060364035,"user_tz":-330,"elapsed":9,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":[""],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"ziQPlpMCfJcM","colab":{"base_uri":"https://localhost:8080/","height":580},"executionInfo":{"status":"ok","timestamp":1622060364638,"user_tz":-330,"elapsed":13,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"8b0df3a9-1c81-4db2-80c1-be77720e18bf"},"source":["df[\"tweets\"]=df['response']\n","df1[\"tweets\"]=df1['response']\n","data=df\n","df1"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>context</th>\n","      <th>response</th>\n","      <th>id</th>\n","      <th>labels</th>\n","      <th>tweets</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Dear Trump: the bill is now on your desk. Vet...</td>\n","      <td>I was elected to golf not to uh, got nothing.</td>\n","      <td>reddit_1</td>\n","      <td>1</td>\n","      <td>I was elected to golf not to uh, got nothing.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Thailand cave rescue: All 12 boys, coach free...</td>\n","      <td>I thought those kids were in a very bad spot. ...</td>\n","      <td>reddit_2</td>\n","      <td>1</td>\n","      <td>I thought those kids were in a very bad spot. ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Snapchat: \"To attract more Android users, we ...</td>\n","      <td>Nothing gives off that hipster, low budget, st...</td>\n","      <td>reddit_3</td>\n","      <td>1</td>\n","      <td>Nothing gives off that hipster, low budget, st...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Nickelodeon just uploaded a high quality vers...</td>\n","      <td>A major corporation would run a kickstarter so...</td>\n","      <td>reddit_4</td>\n","      <td>1</td>\n","      <td>A major corporation would run a kickstarter so...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SARCASM</td>\n","      <td>[Before you all start theorizing about Mats re...</td>\n","      <td>Yup, scott “accidentally” added a last name to...</td>\n","      <td>reddit_5</td>\n","      <td>0</td>\n","      <td>Yup, scott “accidentally” added a last name to...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1795</th>\n","      <td>SARCASM</td>\n","      <td>[Spoiler Cristiane Justino vs. Amanda Nunes, H...</td>\n","      <td>she will probably beat him too. she can fight ...</td>\n","      <td>reddit_1796</td>\n","      <td>0</td>\n","      <td>she will probably beat him too. she can fight ...</td>\n","    </tr>\n","    <tr>\n","      <th>1796</th>\n","      <td>NOT_SARCASM</td>\n","      <td>[Treyarch makes the most unbalanced game ever....</td>\n","      <td>No, but then the game really glitch(ed) out fo...</td>\n","      <td>reddit_1797</td>\n","      <td>1</td>\n","      <td>No, but then the game really glitch(ed) out fo...</td>\n","    </tr>\n","    <tr>\n","      <th>1797</th>\n","      <td>SARCASM</td>\n","      <td>[First Official Image from \"Zombieland: Double...</td>\n","      <td>&gt; Zombieland ~~2:~~ Double Tap They changed it...</td>\n","      <td>reddit_1798</td>\n","      <td>0</td>\n","      <td>&gt; Zombieland ~~2:~~ Double Tap They changed it...</td>\n","    </tr>\n","    <tr>\n","      <th>1798</th>\n","      <td>SARCASM</td>\n","      <td>[Its time to ban /r/The_Donald: Calling out sp...</td>\n","      <td>We're not *supporting racists* and prospective...</td>\n","      <td>reddit_1799</td>\n","      <td>0</td>\n","      <td>We're not *supporting racists* and prospective...</td>\n","    </tr>\n","    <tr>\n","      <th>1799</th>\n","      <td>SARCASM</td>\n","      <td>[59 Alabama ministers sign a letter saying Roy...</td>\n","      <td>Is she old enough to have Facebook</td>\n","      <td>reddit_1800</td>\n","      <td>0</td>\n","      <td>Is she old enough to have Facebook</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1800 rows × 6 columns</p>\n","</div>"],"text/plain":["            label  ...                                             tweets\n","0     NOT_SARCASM  ...      I was elected to golf not to uh, got nothing.\n","1     NOT_SARCASM  ...  I thought those kids were in a very bad spot. ...\n","2     NOT_SARCASM  ...  Nothing gives off that hipster, low budget, st...\n","3     NOT_SARCASM  ...  A major corporation would run a kickstarter so...\n","4         SARCASM  ...  Yup, scott “accidentally” added a last name to...\n","...           ...  ...                                                ...\n","1795      SARCASM  ...  she will probably beat him too. she can fight ...\n","1796  NOT_SARCASM  ...  No, but then the game really glitch(ed) out fo...\n","1797      SARCASM  ...  > Zombieland ~~2:~~ Double Tap They changed it...\n","1798      SARCASM  ...  We're not *supporting racists* and prospective...\n","1799      SARCASM  ...                Is she old enough to have Facebook \n","\n","[1800 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"I0aXGKNvf4Xc","executionInfo":{"status":"ok","timestamp":1622060364640,"user_tz":-330,"elapsed":10,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["X_s = data['tweets'].values\n","y_s = data['labels'].values\n","\n","Xt_s = df1['tweets'].values\n","yt_s = df1['labels'].values\n","# X_train, X_test, y_train, y_test = train_test_split(X_s, y_s, test_size=0.2, random_state=42)\n","X_train, X_test, y_train, y_test = X_s,Xt_s,y_s,yt_s"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"ubbVYAZbf4UA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060365233,"user_tz":-330,"elapsed":15,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"73a766c5-f163-4803-e6e9-e56ec17d20da"},"source":["unique, counts = np.unique(y_train, return_counts=True)\n","dict(zip(unique, counts))\n","# X_train, X_test, y_train, y_test = train_test_split(X_s, y_s, test_size=0.2, random_state=42)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 2200, 1: 2200}"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"N3wrEM7lf4R8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060365234,"user_tz":-330,"elapsed":12,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"1208b49e-9605-4726-e7d1-9badd399db27"},"source":["unique, counts = np.unique(y_test, return_counts=True)\n","dict(zip(unique, counts))"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 900, 1: 900}"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"xjUSILrvf4P2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060365235,"user_tz":-330,"elapsed":10,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"9e53b239-ba26-4e5a-f2e5-bf65aa9e39d0"},"source":["t = Tokenizer(filters='\"$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n')\n","t.fit_on_texts(X_train)\n","vocab_size = len(t.word_index) + 1\n","print(vocab_size)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["9675\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FiNpT1Hmf4NS","executionInfo":{"status":"ok","timestamp":1622060365835,"user_tz":-330,"elapsed":18,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["encoded_train = t.texts_to_sequences(X_train)\n","encoded_test = t.texts_to_sequences(X_test)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"1eSvUy6zf4Kn","executionInfo":{"status":"ok","timestamp":1622060365838,"user_tz":-330,"elapsed":19,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["max_length = 140\n","# pad_len=max(max([len(X_train[i]) for i in range(len(X_train))]),max([len(X_test[i]) for i in range(len(X_test))])) #tunable\n","padded_train = pad_sequences(encoded_train, maxlen=max_length, padding='post')\n","padded_test = pad_sequences(encoded_test, maxlen=max_length, padding='post')"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"XfPJUFmWf4Ij","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1622060365840,"user_tz":-330,"elapsed":17,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"864c3275-46b8-48e9-f947-5f51570f8866"},"source":["%pwd"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content'"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"coNRSJI5bpIy","colab":{"base_uri":"https://localhost:8080/","height":371},"executionInfo":{"status":"error","timestamp":1622060366785,"user_tz":-330,"elapsed":440,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"5c8cc8f0-f646-4f54-976e-4eb652dc405d"},"source":["import gensim.models as gsm\n","\n","e2v = gsm.Word2Vec.load_word2vec_format('emoji2vec.bin', binary=True)\n","happy_vector = e2v['😂']    # Produces an embedding vector of length 300\n"],"execution_count":13,"outputs":[{"output_type":"error","ename":"DeprecationWarning","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mDeprecationWarning\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-8e15dcafd0ed>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mgensim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgsm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0me2v\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgsm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWord2Vec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_word2vec_format\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'emoji2vec.bin'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mhappy_vector\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0me2v\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'😂'\u001b[0m\u001b[0;34m]\u001b[0m    \u001b[0;31m# Produces an embedding vector of length 300\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gensim/models/word2vec.py\u001b[0m in \u001b[0;36mload_word2vec_format\u001b[0;34m(cls, fname, fvocab, binary, encoding, unicode_errors, limit, datatype)\u001b[0m\n\u001b[1;32m   1280\u001b[0m             limit=None, datatype=REAL):\n\u001b[1;32m   1281\u001b[0m         \u001b[0;34m\"\"\"Deprecated. Use :meth:`gensim.models.KeyedVectors.load_word2vec_format` instead.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1282\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mDeprecationWarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Deprecated. Use gensim.models.KeyedVectors.load_word2vec_format instead.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1284\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msave_word2vec_format\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfvocab\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mDeprecationWarning\u001b[0m: Deprecated. Use gensim.models.KeyedVectors.load_word2vec_format instead."]}]},{"cell_type":"code","metadata":{"id":"Zl66AVi3f4GC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060484252,"user_tz":-330,"elapsed":60182,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"7c85e62b-9460-4fcd-8be8-2738c938fd58"},"source":["# load the whole embedding into memory\n","embeddings_index = dict()\n","f = open('/content/drive/MyDrive/sarcasm/glove.twitter.27B.200d.txt')\n","for line in f:\n","    values = line.split()\n","    word = values[0]\n","    coefs = asarray(values[1:], dtype='float32')\n","    embeddings_index[word] = coefs\n","\n","f.close()\n","print('Loaded %s word vectors.' % len(embeddings_index))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Loaded 1193514 word vectors.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EkExlDtNf4EH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060505439,"user_tz":-330,"elapsed":505,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"31020910-9e5d-44df-fe33-19a0da1776d3"},"source":["\n","# create a weight matrix for words in training docs\n","embedding_matrix = np.zeros((vocab_size, 200))\n","for word, i in t.word_index.items():\n","    try:\n","        embedding_vector = embeddings_index[word]\n","    except:\n","        embedding_vector = [0]*200\n","    \n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector\n","        \n","embedding_matrix.shape"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(9675, 200)"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"4YmMHPlwf4B3","executionInfo":{"status":"ok","timestamp":1622060506997,"user_tz":-330,"elapsed":523,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["def recall_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","        recall = true_positives / (possible_positives + K.epsilon())\n","        return recall\n","\n","def precision_m(y_true, y_pred):\n","        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","        precision = true_positives / (predicted_positives + K.epsilon())\n","        return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 2*((precision*recall)/(precision+recall+K.epsilon()))"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qwz8H6eW5PZX","executionInfo":{"status":"ok","timestamp":1622060507496,"user_tz":-330,"elapsed":3,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"85770e89-7793-404d-abc8-dcf3190b245b"},"source":["y_train = to_categorical(y_train, num_classes=2)\n","y_test = to_categorical(y_test, num_classes=2)\n","y_train.shape\n","print(y_train)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["[[1. 0.]\n"," [1. 0.]\n"," [1. 0.]\n"," ...\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cs-zdHeff3_6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060513345,"user_tz":-330,"elapsed":5524,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"6d939754-d569-4608-9225-33bf8bff4f64"},"source":["input_data = Input(shape=(max_length,), name='main_input')\n","embedding_layer = Embedding(vocab_size, 200, weights=[embedding_matrix], trainable=False)(input_data)\n","conv_1 = Conv1D(filters=50, kernel_size=4, activation='relu')(embedding_layer)\n","max_1 = MaxPooling1D(pool_size=2)(conv_1)\n","conv_2 = Conv1D(filters=100, kernel_size=3, activation='relu')(max_1)\n","max_2 = MaxPooling1D(pool_size=2)(conv_2)\n","# layer=LSTM(128, kernel_initializer='he_normal', activation='sigmoid')(max_2)\n","flatten = Flatten()(max_2)\n","dense = Dense(100, activation='relu', name='fully_connected')(flatten)\n","out = Dense(2, activation='softmax')(dense)\n","\n","model_01 = Model(inputs=[input_data], outputs=[out])\n","\n","print(model_01.summary())"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","main_input (InputLayer)      [(None, 140)]             0         \n","_________________________________________________________________\n","embedding (Embedding)        (None, 140, 200)          1935000   \n","_________________________________________________________________\n","conv1d (Conv1D)              (None, 137, 50)           40050     \n","_________________________________________________________________\n","max_pooling1d (MaxPooling1D) (None, 68, 50)            0         \n","_________________________________________________________________\n","conv1d_1 (Conv1D)            (None, 66, 100)           15100     \n","_________________________________________________________________\n","max_pooling1d_1 (MaxPooling1 (None, 33, 100)           0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 3300)              0         \n","_________________________________________________________________\n","fully_connected (Dense)      (None, 100)               330100    \n","_________________________________________________________________\n","dense (Dense)                (None, 2)                 202       \n","=================================================================\n","Total params: 2,320,452\n","Trainable params: 385,452\n","Non-trainable params: 1,935,000\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HQcBi9Tef39o","executionInfo":{"status":"ok","timestamp":1622060513346,"user_tz":-330,"elapsed":6,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":[""],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"YFau-n0uf37l","executionInfo":{"status":"ok","timestamp":1622060513346,"user_tz":-330,"elapsed":5,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["reduce_lr = ReduceLROnPlateau(monitor='val_f1_m', \n","                              mode = 'max', \n","                              factor=0.5, \n","                              patience=5, \n","                              min_lr=0.0001, \n","                              verbose=10)\n","\n","checkpoint = ModelCheckpoint(\"models/sentiment_model.h5\", \n","                               monitor=\"val_f1_m\", \n","                               mode=\"max\", \n","                               save_best_only = True, \n","                               verbose=1)\n","\n","earlystop = EarlyStopping(monitor = 'val_f1_m', \n","                            mode=\"max\", \n","                            min_delta = 0, \n","                            patience = 5,\n","                            verbose=1)"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"uUPjY5ickj9F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060552788,"user_tz":-330,"elapsed":39090,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"c0424895-c087-40dd-aa30-8ab57b48d154"},"source":["c = optimizers.Adam(lr = 0.0001)\n","model_01.compile(optimizer=c, loss='categorical_crossentropy', metrics=[f1_m, 'acc'])\n","\n","h1 = model_01.fit(padded_train, y_train, \n","               batch_size=64, \n","               epochs=50, \n","               verbose=1, callbacks=[checkpoint, earlystop, reduce_lr],\n","               validation_data=(padded_test, y_test)) \n","              #  validation_split=0.2)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/optimizer_v2/optimizer_v2.py:375: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/50\n","69/69 [==============================] - 33s 13ms/step - loss: 0.6883 - f1_m: 0.5471 - acc: 0.5473 - val_loss: 0.6940 - val_f1_m: 0.5135 - val_acc: 0.5139\n","\n","Epoch 00001: val_f1_m improved from -inf to 0.51347, saving model to models/sentiment_model.h5\n","Epoch 2/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.6792 - f1_m: 0.5596 - acc: 0.5600 - val_loss: 0.6964 - val_f1_m: 0.5172 - val_acc: 0.5139\n","\n","Epoch 00002: val_f1_m improved from 0.51347 to 0.51724, saving model to models/sentiment_model.h5\n","Epoch 3/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.6710 - f1_m: 0.5716 - acc: 0.5720 - val_loss: 0.6935 - val_f1_m: 0.5199 - val_acc: 0.5206\n","\n","Epoch 00003: val_f1_m improved from 0.51724 to 0.51994, saving model to models/sentiment_model.h5\n","Epoch 4/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.6607 - f1_m: 0.6045 - acc: 0.6045 - val_loss: 0.6938 - val_f1_m: 0.5323 - val_acc: 0.5333\n","\n","Epoch 00004: val_f1_m improved from 0.51994 to 0.53233, saving model to models/sentiment_model.h5\n","Epoch 5/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.6463 - f1_m: 0.6332 - acc: 0.6334 - val_loss: 0.6934 - val_f1_m: 0.5307 - val_acc: 0.5278\n","\n","Epoch 00005: val_f1_m did not improve from 0.53233\n","Epoch 6/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.6276 - f1_m: 0.6643 - acc: 0.6645 - val_loss: 0.6907 - val_f1_m: 0.5458 - val_acc: 0.5433\n","\n","Epoch 00006: val_f1_m improved from 0.53233 to 0.54580, saving model to models/sentiment_model.h5\n","Epoch 7/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.6024 - f1_m: 0.6842 - acc: 0.6843 - val_loss: 0.6874 - val_f1_m: 0.5657 - val_acc: 0.5639\n","\n","Epoch 00007: val_f1_m improved from 0.54580 to 0.56573, saving model to models/sentiment_model.h5\n","Epoch 8/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.5694 - f1_m: 0.7266 - acc: 0.7266 - val_loss: 0.6903 - val_f1_m: 0.5738 - val_acc: 0.5683\n","\n","Epoch 00008: val_f1_m improved from 0.56573 to 0.57381, saving model to models/sentiment_model.h5\n","Epoch 9/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.5314 - f1_m: 0.7593 - acc: 0.7593 - val_loss: 0.6950 - val_f1_m: 0.5776 - val_acc: 0.5722\n","\n","Epoch 00009: val_f1_m improved from 0.57381 to 0.57759, saving model to models/sentiment_model.h5\n","Epoch 10/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.5031 - f1_m: 0.7741 - acc: 0.7739 - val_loss: 0.7045 - val_f1_m: 0.5717 - val_acc: 0.5739\n","\n","Epoch 00010: val_f1_m did not improve from 0.57759\n","Epoch 11/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.4561 - f1_m: 0.8103 - acc: 0.8102 - val_loss: 0.7179 - val_f1_m: 0.5727 - val_acc: 0.5750\n","\n","Epoch 00011: val_f1_m did not improve from 0.57759\n","Epoch 12/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.4149 - f1_m: 0.8348 - acc: 0.8352 - val_loss: 0.7471 - val_f1_m: 0.5636 - val_acc: 0.5617\n","\n","Epoch 00012: val_f1_m did not improve from 0.57759\n","Epoch 13/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.3732 - f1_m: 0.8643 - acc: 0.8641 - val_loss: 0.7840 - val_f1_m: 0.5625 - val_acc: 0.5606\n","\n","Epoch 00013: val_f1_m did not improve from 0.57759\n","Epoch 14/50\n","69/69 [==============================] - 0s 6ms/step - loss: 0.3319 - f1_m: 0.8850 - acc: 0.8855 - val_loss: 0.7916 - val_f1_m: 0.5700 - val_acc: 0.5683\n","\n","Epoch 00014: val_f1_m did not improve from 0.57759\n","Epoch 00014: early stopping\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KITrWAVakmbp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060554045,"user_tz":-330,"elapsed":1276,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"1d5df061-6573-403a-fdf5-3f553581fed8"},"source":["score_1 = model_01.evaluate(padded_test, y_test)\n","score_1"],"execution_count":24,"outputs":[{"output_type":"stream","text":["57/57 [==============================] - 0s 3ms/step - loss: 0.7916 - f1_m: 0.5691 - acc: 0.5683\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.7916427254676819, 0.5690788626670837, 0.5683333277702332]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"ijPdqVS5kmdr","executionInfo":{"status":"ok","timestamp":1622060369169,"user_tz":-330,"elapsed":16,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":[""],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"e6ngYmt0bsjO"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9jH8AELmbsfq"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KD4yzPn0bsdv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"786yjzTSbsRG"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QkCfQmq1jwG_"},"source":["# Using RNN"]},{"cell_type":"code","metadata":{"id":"5xD9AasCNyeW","executionInfo":{"status":"ok","timestamp":1622060554046,"user_tz":-330,"elapsed":8,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["import pandas as pd\n","import numpy as np\n","from numpy import asarray\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","\n","import pydotplus as pyd\n","\n","import keras\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.models import Model\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard, EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.layers import Dense, Input, Flatten, Embedding, Conv1D, MaxPooling1D, Dropout, BatchNormalization, Activation, concatenate,LSTM"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"eA6r8CE9bmEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060554712,"user_tz":-330,"elapsed":673,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"e1462978-1a05-4c14-b1c6-d7884494ab59"},"source":["# embed_dim = 128\n","# lstm_out = 196\n","# input2 = Input(shape=(max_length,), name='main_input')\n","# embd = Embedding(vocab_size, 200, weights=[embedding_matrix], trainable=False)(input2)\n","# # embd=Embedding(vocab_size, 200)(input2)\n","# drop=SpatialDropout1D(0.4)(embd)\n","# lstm=LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2)(drop)\n","# out2=Dense(2,activation='softmax')(lstm)\n","# model2=Model(input2,out2)\n","\n","import tensorflow as tf\n","inp1 = Input(shape=(max_length,))\n","x = Embedding(vocab_size, 200, weights=[embedding_matrix])(inp1)\n","x = tf.keras.layers.Bidirectional(LSTM(256, return_sequences=True))(x)\n","x = tf.keras.layers.Bidirectional(LSTM(150))(x)\n","x = Dense(128, activation=\"relu\")(x)\n","x = Dropout(0.1)(x)\n","x = Dense(64, activation=\"relu\")(x)\n","x = Dense(2, activation=\"softmax\")(x)    \n","model2 = Model(inputs=inp1, outputs=x)\n","\n","print(model2.summary())\n","model2.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 140)]             0         \n","_________________________________________________________________\n","embedding_1 (Embedding)      (None, 140, 200)          1935000   \n","_________________________________________________________________\n","bidirectional (Bidirectional (None, 140, 512)          935936    \n","_________________________________________________________________\n","bidirectional_1 (Bidirection (None, 300)               795600    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 128)               38528     \n","_________________________________________________________________\n","dropout (Dropout)            (None, 128)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 64)                8256      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 130       \n","=================================================================\n","Total params: 3,713,450\n","Trainable params: 3,713,450\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9K3JUFRDdUoM","executionInfo":{"status":"ok","timestamp":1622060554713,"user_tz":-330,"elapsed":12,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":["reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', \n","                              mode = 'max', \n","                              factor=0.9, \n","                              patience=4, \n","                              min_lr=0.00001, \n","                              verbose=10)\n","\n","checkpoint = ModelCheckpoint(\"models/sentiment_model.h5\", \n","                               monitor=\"val_accuracy\", \n","                               mode=\"max\", \n","                               save_best_only = True, \n","                               verbose=1)\n","\n","earlystop = EarlyStopping(monitor = 'val_accuracy', \n","                            mode=\"max\", \n","                            min_delta = 0, \n","                            patience = 4,\n","                            verbose=1)"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"id":"UiltcusTdbSq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622060593739,"user_tz":-330,"elapsed":39037,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}},"outputId":"bde284d5-84f6-448e-984d-5fcfdb162424"},"source":["batch_size = 64\n","history=model2.fit(padded_train, y_train, epochs = 25, batch_size=batch_size,validation_data=(padded_test,y_test), callbacks=[ earlystop, reduce_lr])"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Epoch 1/25\n","69/69 [==============================] - 12s 95ms/step - loss: 0.6673 - accuracy: 0.5943 - val_loss: 0.6538 - val_accuracy: 0.6317\n","Epoch 2/25\n","69/69 [==============================] - 5s 79ms/step - loss: 0.6000 - accuracy: 0.6825 - val_loss: 0.6452 - val_accuracy: 0.6400\n","Epoch 3/25\n","69/69 [==============================] - 5s 79ms/step - loss: 0.5066 - accuracy: 0.7616 - val_loss: 0.6861 - val_accuracy: 0.6228\n","Epoch 4/25\n","69/69 [==============================] - 5s 78ms/step - loss: 0.3677 - accuracy: 0.8423 - val_loss: 0.7258 - val_accuracy: 0.5939\n","Epoch 5/25\n","69/69 [==============================] - 5s 78ms/step - loss: 0.2085 - accuracy: 0.9202 - val_loss: 1.0571 - val_accuracy: 0.5883\n","Epoch 6/25\n","69/69 [==============================] - 5s 78ms/step - loss: 0.0978 - accuracy: 0.9670 - val_loss: 1.6971 - val_accuracy: 0.5900\n","\n","Epoch 00006: ReduceLROnPlateau reducing learning rate to 0.0009000000427477062.\n","Epoch 00006: early stopping\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"f3aZ5xZHPTTh","executionInfo":{"status":"ok","timestamp":1622060593739,"user_tz":-330,"elapsed":23,"user":{"displayName":"UDIT KALANI","photoUrl":"","userId":"14115979490963977655"}}},"source":[""],"execution_count":28,"outputs":[]}]}